spring.application.name=sandbox-k8s-manifest-generation
spring.application.version=1.0.0
server.port=8080

random-users.uri=https://randomuser.me


# Dekorate configuration
## To expose the application using Ingress
dekorate.kubernetes.ingress.host=kubernetes-example.com
dekorate.kubernetes.ingress.expose=true
dekorate.kubernetes.ingress.tlsSecretName=tls-secret
## To include the keystore secret
dekorate.options.input-path=k8s

## To generate the Certificate and the Issuer resources
dekorate.certificate.secret-name=tls-secret
dekorate.certificate.dnsNames=kubernetes-example.com,localhost
dekorate.certificate.self-signed.enabled=true
dekorate.certificate.subject.organizations=Dekorate,Community
dekorate.certificate.duration=2160h0m0s
dekorate.certificate.renewBefore=360h0m0s
dekorate.certificate.privateKey.algorithm=RSA
dekorate.certificate.privateKey.encoding=PKCS8
dekorate.certificate.privateKey.size=2048
dekorate.certificate.keystores.pkcs12.create=true
dekorate.certificate.keystores.pkcs12.passwordSecretRef.name=pkcs12-pass
dekorate.certificate.keystores.pkcs12.passwordSecretRef.key=password
dekorate.certificate.usages=server auth,client auth

## To configure the application for using the generated Certificate and Issuer resources
dekorate.kubernetes.env-vars[0].name=SERVER_SSL_KEY_STORE
dekorate.kubernetes.env-vars[0].value=/etc/certs/keystore.p12
dekorate.kubernetes.env-vars[1].name=SERVER_SSL_KEY_STORE_PASSWORD
dekorate.kubernetes.env-vars[1].secret=pkcs12-pass
dekorate.kubernetes.env-vars[1].value=password


dekorate.helm.name=myChart
# Dependencies
dekorate.helm.dependencies[0].name=dependencyNameA
dekorate.helm.dependencies[0].version=0.0.1
dekorate.helm.dependencies[0].repository=http://localhost:8080
dekorate.helm.dependencies[1].name=dependencyNameB
dekorate.helm.dependencies[1].alias=app
dekorate.helm.dependencies[2].name=dependencyNameC
dekorate.helm.dependencies[2].condition=app.database.enabled
dekorate.helm.dependencies[2].tags=web,frontend
# Normal use case
dekorate.helm.values[0].property=name
dekorate.helm.values[0].paths=(kind == Ingress).spec.rules.http.paths.backend.service.name
# When path is not found
dekorate.helm.values[1].property=notFound
dekorate.helm.values[1].paths=metadata.not-found
# Using values
dekorate.helm.values[2].property=vcsUrl
dekorate.helm.values[2].paths=(kind == Deployment).spec.template.metadata.annotations.'app.dekorate.io/vcs-url'
dekorate.helm.values[2].value=Overridden
# Using values with profile
dekorate.helm.values[3].property=app.vcsUrl
dekorate.helm.values[3].paths=(kind == Deployment).spec.template.metadata.annotations.'app.dekorate.io/vcs-url'
dekorate.helm.values[3].value=Only for DEV!
dekorate.helm.values[3].profile=dev
# Providing a different value for existing property (ingress.port)
dekorate.helm.values[4].property=host
dekorate.helm.values[4].value=my-test-host
dekorate.helm.values[4].profile=dev
# Providing a value containing a complete Helm expression
dekorate.helm.values[5].property=path
dekorate.helm.values[5].paths=(kind == Ingress).spec.rules.http.paths.path
dekorate.helm.values[5].expression={{ .Values.app.path | default '/' }}
# Necessary to verify the generated Ingress resource
dekorate.helm.values[6].property=ingress.label.value
dekorate.helm.values[6].paths=(kind == Ingress).metadata.annotations.'app.dekorate.io/commit-id',(kind == Ingress).metadata.labels.'app.kubernetes.io/version'
dekorate.helm.values[6].value=Overridden
dekorate.helm.values[7].property=dependencyNameA.config
dekorate.helm.values[7].value=aValue
dekorate.helm.values[8].property=app.config.database
dekorate.helm.values[8].value=mysql
dekorate.helm.values[9].property=@.prop
dekorate.helm.values[9].value=rootless-property
# Example of include templates
dekorate.helm.expressions[0].path=(kind == Service).metadata.annotations.'app.dekorate.io/build-timestamp'
dekorate.helm.expressions[0].expression={{ include "foo.name" . }}
# Example of expressions
dekorate.helm.expressions[1].path=(kind == Service).metadata.annotations.'app.dekorate.io/commit-id'
dekorate.helm.expressions[1].expression={{ .Values.favorite.drink | default "tea" | quote }}
# Example of call templates
dekorate.helm.expressions[2].path=(kind == Service).metadata.labels
dekorate.helm.expressions[2].expression={{- template "mychart.labels" }}
dekorate.helm.expressions[3].path=(kind == ConfigMap && metadata.name == my-configmap).data
dekorate.helm.expressions[3].expression={{- range $key, $val := .Values.favorite }}\n\
{{ indent 2 $key }}: {{ $val | quote }}\n\
{{- end }}
# Condition as resource level
dekorate.helm.addIfStatements[0].property=ingress.enabled
dekorate.helm.addIfStatements[0].onResourceKind=Ingress
# Schema
dekorate.helm.valuesSchema.title=My Values
dekorate.helm.valuesSchema.properties[0].name=replicas
dekorate.helm.valuesSchema.properties[0].minimum=3
dekorate.helm.valuesSchema.properties[0].maximum=5
dekorate.helm.valuesSchema.properties[0].description=Overwrite default description!
dekorate.helm.valuesSchema.properties[1].name=app.serviceType
dekorate.helm.valuesSchema.properties[1].required=true

# Kubernetes configuration to assert the tests
dekorate.kubernetes.replicas=3
dekorate.kubernetes.readinessProbe.httpActionPath=/readiness
dekorate.kubernetes.readinessProbe.periodSeconds=30
dekorate.kubernetes.readinessProbe.timeoutSeconds=10
dekorate.kubernetes.livenessProbe.tcpSocketAction=my-service:1111
dekorate.kubernetes.livenessProbe.periodSeconds=31
dekorate.kubernetes.livenessProbe.timeoutSeconds=11
dekorate.kubernetes.startupProbe.execAction=command1 command2
dekorate.kubernetes.startupProbe.periodSeconds=32
dekorate.kubernetes.startupProbe.timeoutSeconds=12
